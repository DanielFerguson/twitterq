generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TwitterAccount {
  id              String     @id @default(cuid())
  username        String     @unique
  friendlyName    String
  description     String     @db.Text
  profileImageUrl String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  questions       Question[]
}

model Question {
  id         String         @id @default(cuid())
  askedAt    DateTime?
  answeredAt DateTime?
  content    String
  recipent   TwitterAccount @relation(fields: [twitterAccountId], references: [id])
  answer     String?

  twitterAccountId String
  Notifications    Notifications[]
}

model Notifications {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sentAt       DateTime?
  emailAddress String
  question     Question  @relation(fields: [questionId], references: [id])
  questionId   String
}
